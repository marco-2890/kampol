import tkinter as tk
from tkinter import ttk
import hashlib

# ---------------- р╕Яр╕▒р╕Зр╕Бр╣Мр╕Кр╕▒р╕Щ ----------------
def check_port(port):
    ports = {
        22: "ЁЯФС SSH (Secure Shell) - Remote Login",
        21: "ЁЯУВ FTP (File Transfer Protocol)",
        23: "ЁЯУб Telnet (р╣Др╕бр╣Ир╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в)",
        25: "тЬЙя╕П SMTP - р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е",
        53: "ЁЯМР DNS - р╣Бр╕Ыр╕ер╕Зр╕Кр╕╖р╣Ир╕нр╣Вр╕Фр╣Ар╕бр╕Щр╣Ар╕Ыр╣Зр╕Щ IP",
        80: "ЁЯМР HTTP - р╣Ар╕зр╣Зр╕Ър╣Др╕бр╣Ир╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕к",
        443: "ЁЯФТ HTTPS - р╣Ар╕зр╣Зр╕Ър╣Ар╕Вр╣Йр╕▓р╕гр╕лр╕▒р╕к SSL/TLS",
        3306: "ЁЯРм MySQL - р╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е",
        3389: "ЁЯЦея╕П RDP - Remote Desktop (Windows)"
    }
    if port in ports:
        return ports[port]
    elif 0 <= port <= 1023:
        return f"тЪая╕П Well-Known Port ({port})"
    elif 1024 <= port <= 49151:
        return f"тД╣я╕П Registered Port ({port})"
    elif 49152 <= port <= 65535:
        return f"ЁЯФ╣ Dynamic/Private Port ({port})"
    else:
        return "тЭМ Invalid Port"

def password_strength(password):
    length = len(password)
    if length < 6:
        return "тЭМ р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕нр╣Ир╕нр╕Щ"
    elif 6 <= length < 10:
        return "тЪая╕П р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Ыр╕▓р╕Щр╕Бр╕ер╕▓р╕З"
    else:
        return "тЬЕ р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Бр╕Вр╣Зр╕Зр╣Бр╕гр╕З"

def sha256_hash(text):
    return hashlib.sha256(text.encode()).hexdigest()

# ---------------- GUI ----------------
root = tk.Tk()
root.title("Mini Cyber Security Lab")
root.geometry("600x500")
root.configure(bg="#f0f2f5")

def update_result(text):
    result_text.config(state='normal')
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, text)
    result_text.config(state='disabled')

# --- Port Frame ---
port_frame = ttk.LabelFrame(root, text="р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Юр╕нр╕гр╣Мр╕Х", padding=15)
port_frame.pack(fill="x", padx=20, pady=10)

port_entry = ttk.Entry(port_frame)
port_entry.pack(side="left", expand=True, fill="x", padx=5)
ttk.Button(port_frame, text="р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ", command=lambda: update_result(check_port(int(port_entry.get()) if port_entry.get().isdigit() else "0"))).pack(side="left", padx=5)

# --- Password Frame ---
pwd_frame = ttk.LabelFrame(root, text="р╕Чр╕Фр╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╣Бр╕Вр╣Зр╕Зр╣Бр╕гр╕Зр╕Вр╕нр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ", padding=15)
pwd_frame.pack(fill="x", padx=20, pady=10)

password_entry = ttk.Entry(pwd_frame, show="*")
password_entry.pack(side="left", expand=True, fill="x", padx=5)

# Checkbox р╣Бр╕кр╕Фр╕З/р╕Лр╣Ир╕нр╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
def toggle_password():
    if show_var.get():
        password_entry.config(show="")
    else:
        password_entry.config(show="*")

show_var = tk.BooleanVar()
show_check = tk.Checkbutton(pwd_frame, text="р╣Бр╕кр╕Фр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ", variable=show_var, command=toggle_password)
show_check.pack(side="left", padx=5)

ttk.Button(pwd_frame, text="р╕Чр╕Фр╕кр╕нр╕Ъ", command=lambda: update_result(password_strength(password_entry.get()))).pack(side="left", padx=5)

# --- SHA256 Frame ---
sha_frame = ttk.LabelFrame(root, text="р╣Бр╕Ыр╕ер╕Зр╕Вр╣Йр╕нр╕Др╕зр╕▓р╕бр╣Ар╕Ыр╣Зр╕Щ SHA256", padding=15)
sha_frame.pack(fill="x", padx=20, pady=10)

sha_entry = ttk.Entry(sha_frame)
sha_entry.pack(side="left", expand=True, fill="x", padx=5)
ttk.Button(sha_frame, text="р╣Бр╕Ыр╕ер╕З", command=lambda: update_result(f"SHA256: {sha256_hash(sha_entry.get())}")).pack(side="left", padx=5)

# --- Result Frame ---
result_frame = ttk.LabelFrame(root, text="р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М", padding=15)
result_frame.pack(fill="both", expand=True, padx=20, pady=10)

result_text = tk.Text(result_frame, height=10, wrap="word", state="disabled")
result_text.pack(fill="both", expand=True)

# --- Exit Button ---
exit_btn = tk.Button(root, text="р╕нр╕нр╕Бр╕Ир╕▓р╕Бр╣Вр╕Ыр╕гр╣Бр╕Бр╕гр╕б", bg="#e74c3c", fg="white", font=("Arial", 12), command=root.destroy)
exit_btn.pack(pady=10)

root.mainloop()
